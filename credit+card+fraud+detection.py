# -*- coding: utf-8 -*-
"""Credit+card+fraud+detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17mTtJdQDyqNyJSdx_1WA6gouTNGyOzaY?usp=sharing
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('credit.csv')

df.head()

df.info()

df.describe()

#dont need ID
df=df.drop('ID', axis=1)

df.head()

# Checking for null values
df.isnull().sum()

#UNIVARIATE ANALYSIS: Looking at the type of data present in different columns
cat_cols=['SEX','EDUCATION','MARRIAGE','default.payment.next.month']

fig,ax=plt.subplots(1,4,figsize=(25,5))

for cols,subplots in zip(cat_cols,ax.flatten()):
    sns.countplot(x=df[cols],ax=subplots)

#SEX: Gender (1=male, 2=female)
#EDUCATION: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)
#MARRIAGE: Marital status (1=married, 2=single, 3=others)
#Default payment (1=yes, 0=no)

# Vizualizing the imbalance

yes=(((df['default.payment.next.month']==1).sum())/len(df['default.payment.next.month']))*100
no=(((df['default.payment.next.month']==0).sum())/len(df['default.payment.next.month']))*100

x=[yes,no]

plt.pie(x,labels=['Yes','No'],colors=['red', 'white'],radius=2,autopct='%1.0f%%')
plt.title('default.payment.next.month')
plt.show()

df['default.payment.next.month'].value_counts(normalize=True)

X=df.drop('default.payment.next.month',axis=1)
y=df['default.payment.next.month']

import numpy as np
from sklearn.model_selection import train_test_split

# Generate example data
X = np.random.rand(100, 5)  # Example feature matrix with 100 samples and 5 features
y = np.random.randint(2, size=100)  # Example binary target labels

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)

# Now you can use the X_train, X_test, y_train, y_test variables for further processing, such as training a machine learning model.
# For demonstration purposes, let's print the shapes of the datasets.
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier()

model=rfc.fit(X_train,y_train)

predictions=model.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
print(classification_report(y_test,predictions))
